-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine instructions interpreter. Takes an SM-configuration and a 
-- single stack machine instruciton; returns resulting configuration
fun evalInstruction (c@[stack, st, world], insn) {
    case insn of 
      READ ->
      case readWorld(world) of
        [value, new_world] -> [value:stack, st, new_world]
      esac
    | WRITE -> 
      case stack of
        value:new_stack -> [new_stack, st, writeWorld(value, world)]
      esac
    | BINOP (operation) ->
      case stack of
        right:left:new_stack ->
        [evalOperation (operation, left, right):new_stack, st, world]
      esac
    | LD (name) -> [st(name):stack, st, world]
    | ST (name) ->
      case stack of
        value:new_stack -> [new_stack, st<-[name, value], world]
      esac
    | CONST (value) -> [value:stack, st, world]
    esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | insn:l -> eval (evalInstruction (c, insn), l)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (variable_name) -> {LD (variable_name)}
  | Const (value)       -> {CONST (value)}
  | Binop (operation, left_expr, right_expr) ->
    compileExpr (left_expr) +++ compileExpr (right_expr) +++ {BINOP (operation)}  
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (name, expression) -> compileExpr (expression) +++ {ST (name)}
  | Seq (first, second) -> compileSM (first) +++ compileSM (second)
  | Skip -> {}
  | Read (name) -> {READ, ST (name)}
  | Write (expression) -> compileExpr (expression) +++ {WRITE}
  esac
}
