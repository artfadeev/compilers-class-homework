-- Expression evaluator

import List;
import State;


-- Evaluates operation result. Takes string representation of an operator and
-- two values; returns result of the operation.
public fun evalOperation (operation, left, right) {
  case operation of
    "!!" -> left !! right
  | "&&" -> left && right
  | "==" -> left == right
  | "!=" -> left != right
  | "<=" -> left <= right
  | "<"  -> left <  right
  | ">=" -> left >= right
  | ">"  -> left >  right
  | "+"  -> left +  right
  | "-"  -> left -  right
  | "*"  -> left *  right
  | "/"  -> left /  right
  | "%"  -> left %  right
  esac
}


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
  case expr of
    Var (variable_name) -> st (variable_name)
  | Const (value) -> value
  | Binop(operation, left_expr, right_expr) ->
    var left  = evalExpr(st, left_expr);
    var right = evalExpr(st, right_expr);
    evalOperation (operation, left, right)
  esac
}
