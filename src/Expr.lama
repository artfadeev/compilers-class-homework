-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- MERGE NOTE: evalOperation was replaced by evalOp

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


-- returns [new_config, value]
-- value is either Refer(), Bot or just value
fun eval(config@[st, w], expr) {
    case expr of 
          Read(name) ->
            case readWorld(w) of 
              [value, w] -> [[st <- [name, value], w], Bot]
            esac
        | Write(expression) ->
            case eval(config, expression) of
              [c@[st, w], value] -> [[st, writeWorld(value, w)], Bot]
            esac
        | Seq(first, second) ->
            case eval(config, first) of
              [config2, _] -> eval(config2, second)
            esac
        | Ignore(expression) ->
            case eval(config, expression) of 
              [config2, _] -> [config2, Bot]
            esac
        | Ref(name) -> [config, Refer(name)]
        | Var(name) -> [config, st(name)]
        | Const(value) -> [config, value]
        | Binop(op, left, right) -> 
            case eval(config, left) of
              [c2, l] ->
                case eval(c2, right) of
                  [c3, r] -> [c3, evalOp(op, l, r)]
                esac
            esac
        | Assn(ref_expr, value_expr) ->
            case eval(config, ref_expr) of
                [c2, Refer(name)] -> 
                  case eval(c2, value_expr) of
                    [c3@[st, w], value] -> [[st<-[name, value], w], value]
                  esac
            esac
        | While(condition, body) ->
            case eval(config, condition) of 
              [c, value] -> if value then eval(eval(c, body).fst, expr) else [c, Bot] fi
            esac
        | If(condition, body, else_block) ->
            case eval(config, condition) of
               [c, value] -> if value then eval(c, body) else eval(c, else_block) fi
            esac
        | DoWhile(statement, condition) ->
            case eval(config, statement) of
                [c, _] ->
                    case eval(c, condition) of
                        [c2, value] -> if value then eval(c2, expr) else [c2, Bot] fi
                    esac
            esac
        | Skip -> [config, Bot]
        | _ -> failure(sprintf("Unexpected expression FORMAT_SEXPR %s", string(expr)))
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr(Void)) of
    [c, _] -> c.snd.getOutput
  esac
}
