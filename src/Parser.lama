-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
    [
        syntax (pos -s[op]),
        fun (l, loc, r) {
            fun (a) {
                assertValue (a, Binop (op, l (Val), r (Val)), loc)
            }
        }
    ]
}

fun parseIfElifElse(if_block@[condition, statement], elif_block, else_statement) {
    case elif_block of 
          {} -> fun(a) { If(condition(Val), statement(a), else_statement(a)) }
        | first_elif:elif_block ->
            case parseIfElifElse(first_elif, elif_block, else_statement) of
                inner_ifelif -> fun (a) { If(condition(Val), statement(a), inner_ifelif(a)) }
            esac
    esac
}

var primary = memo $ eta syntax (
          -- decimal constant
          loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}
        | x=lident { -- identifier
            fun (a) {
                case a of
                      Ref  -> Ref (x)
                    | Void -> Ignore (Var (x))
                    | _    -> Var (x)
                esac
            }}
        | loc=pos -kRead -s["("] name=lident -s[")"] {fun(a) { assertVoid(a, Read(name), loc) }}
        | loc=pos -kWrite -s["("] expression=exp -s[")"] { fun(a) { assertVoid(a, Write(expression(Val)), loc) }}
        | loc=pos -kWhile expression=exp -kDo statement=exp -kOd { fun(a) { assertVoid(a, While(expression(Val), statement(Void)), loc) } }
        | loc=pos -kDo statement=exp -kWhile condition=exp -kOd { fun(a) { assertVoid(a, DoWhile(statement(Void), condition(Val)), loc) } }
        | loc=pos -kSkip { fun(a) { assertVoid(a, Skip, loc) }}
        | loc=pos -s["("] e=exp -s[")"] {e}
        | -kIf ifBlock=(exp -kThen exp) elifBlock=(-kElif exp -kThen exp)* elseblock_loc=pos elseBlock=(-kElse exp)? -kFi {
             parseIfElifElse(ifBlock, elifBlock, case elseBlock of Some(elseStatement) -> elseStatement | None -> fun(a) {assertVoid(a, Skip, elseblock_loc)} esac)
        }
        | loc=pos -kFor init=exp -s[","] condition=exp -s[","] change=exp -kDo body=exp -kOd {
            fun(a) {
              assertVoid(a,
              Seq( 
                init(Void),
                While(condition(Val), Seq(body(Void), change(Void)))
              ),
              loc)
            }
          }
        ),

    basic = memo $ eta (
        expr ({
            [Right, {[s (":="), fun (l, loc, r) { fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)} }]}],
            [Left , map (binop, {"!!"})],
            [Left , map (binop, {"&&"})],
            [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
            [Left , map (binop, {"+", "-"})],
            [Left , map (binop, {"*", "/", "%"})]
         }, primary)),

    exp = memo $ eta syntax (
          basic 
        | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = exp;
