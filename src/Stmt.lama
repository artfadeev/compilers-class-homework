-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;
  case stmt of
    Assn (name, expression) ->
    [state <- [name, evalExpr (state, expression)], world]
  | Seq (first, second) -> eval (eval (c, first), second)
  | Skip -> c
  | Read (name) ->
    var read_result = readWorld(world); -- TODO: value unpacking?
    [state <- [name, read_result.fst], read_result.snd]
  | Write(expression) ->
    [state, writeWorld(evalExpr(state, expression), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
