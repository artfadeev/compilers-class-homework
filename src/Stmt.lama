-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)


fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (name, expression) ->
    [state <- [name, evalExpr (state, expression)], world]
  | Seq (first, second) -> eval (eval (c, first), second)
  | Skip -> c
  | Read (name) ->
    var read_result = readWorld(world); -- TODO: value unpacking?
    [state <- [name, read_result.fst], read_result.snd]
  | Write(expression) ->
    [state, writeWorld(evalExpr(state, expression), world)]
  | If (condition, ifblock, elseblock) -> if evalExpr(state, condition) then eval(c, ifblock) else eval(c, elseblock) fi
  | While(condition, statement) -> if evalExpr(state, condition) then eval(eval(c, statement), stmt) else c fi
  | DoWhile(statement, condition) ->
      case eval(c, statement) of 
        c@[state, _] -> if evalExpr(state, condition) then eval(c, stmt) else c fi
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
